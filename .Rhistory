start.p.df <- cbind(start.p.df, run)
end.p <- cbind(data$run_params["dest_x"],data$run_params["dest_y"])
end.p.df <- as.data.frame(end.p)
colnames(end.p.df)[1:2] = c("Lon", "Lat")
end.p.df <- cbind(end.p.df, run)
ideal.df <- rbind(start.p.df, end.p.df)
t.energy.res <- data$results
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-127, -78), ylim = c(10, 55), expand = FALSE) +
geom_path(data = t.energy.res,
aes(x=lon, y=lat),
color = "red", size = 0.6, alpha = 0.4, lineend = "round") +
geom_path(data = ideal.df,
aes(x=Lon, y=Lat),
color = "black", size = 1.2, alpha = 1, linetype = 2) +
ggtitle(title)
library(rnaturalearth)
library(rnaturalearthdata)
data=testing
world <- ne_countries(scale = "medium", returnclass = "sf")
start.p <- cbind(data$results[1,1], data$results[1,2])
# Generalize this soon
start.p.df <- as.data.frame(start.p)
colnames(start.p.df)[1:2] = c("Lon", "Lat")
run = "ideal"
start.p.df <- cbind(start.p.df, run)
end.p <- cbind(data$run_params["dest_x"],data$run_params["dest_y"])
end.p.df <- as.data.frame(end.p)
colnames(end.p.df)[1:2] = c("Lon", "Lat")
end.p.df <- cbind(end.p.df, run)
ideal.df <- rbind(start.p.df, end.p.df)
t.energy.res <- data$results
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-127, -78), ylim = c(10, 55), expand = FALSE) +
geom_path(data = t.energy.res,
aes(x=lon, y=lat),
color = "red", size = 0.6, alpha = 0.4, lineend = "round") +
geom_path(data = ideal.df,
aes(x=Lon, y=Lat),
color = "black", size = 1.2, alpha = 1, linetype = 2) +
ggtitle(title)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-127, -78), ylim = c(10, 55), expand = FALSE) +
geom_path(data = t.energy.res,
aes(x=lon, y=lat),
color = "red", size = 0.6, alpha = 0.4, lineend = "round")
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-127, -78), ylim = c(10, 55), expand = FALSE) +
geom_path(data = t.energy.res,
aes(x=lon, y=lat),
color = "red", size = 0.6, alpha = 0.4, lineend = "round") +
geom_path(data = ideal.df,
aes(x=Lon, y=Lat),
color = "black", size = 1.2, alpha = 1, linetype = 2)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-127, -78), ylim = c(10, 55), expand = FALSE) +
geom_path(data = t.energy.res,
aes(x=lon, y=lat),
color = "red", size = 0.6, alpha = 0.4, lineend = "round") +
geom_path(data = ideal.df,
aes(x=Lon, y=Lat),
color = "black", size = 1.2, alpha = 1, linetype = 2) +
ggtitle(title)
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-127, -78), ylim = c(10, 55), expand = FALSE) +
geom_path(data = t.energy.res,
aes(x=lon, y=lat),
color = "red", size = 0.6, alpha = 0.4, lineend = "round") +
geom_path(data = ideal.df,
aes(x=Lon, y=Lat),
color = "black", size = 1.2, alpha = 1, linetype = 2) +
ggtitle("mytitle")
energyVIZ(testing,title="Visualizing EnergySIM results",type="plot")
library(abmr)
energyVIZ(testing,title="Visualizing EnergySIM results",type="plot")
energyVIZ(testing,title="Visualizing EnergySIM results",type="table")
testing2=moveSIM(replicates=1,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,modeled_species=N_pop,
my_shapefile=NOAM,optimum=.5,direction="S",write_results=TRUE,single_rast=FALSE)
data(NOAM)
testing2=moveSIM(replicates=1,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,modeled_species=ocwa.pop,
my_shapefile=NOAM,optimum=.5,direction="S",write_results=TRUE,single_rast=FALSE)
testing2
?species
getwd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",warning=FALSE,message=FALSE
)
data(NOAM)
plot(NOAM)
library(raster)
ndvi_raster=stack("C:\\Users\\BGOCHANOUR\\Documents\\GitHub\\move-model\\Input_Data\\NDVI_2013.gri")
plot(ndvi_raster)
species <- setClass("species", slots=c(x="numeric", y="numeric",mass="numeric",
wing="numeric"))
ocwa.pop <- species(x=-112.24, y =52.24, mass=15, wing=19)
table_10.12=matrix(c(2,3,3,12),byrow=T,ncol=2,nrow=2)
table_10.12
fisher.test(table_10.12,alternative = "two.sided")
pchisq(2.2222,1)
1-pchisq(2.2222,1)
table_10.12=matrix(c(1,2,2,0),byrow=T,ncol=2,nrow=2)
chisq.test(table_10.12)
table_10.12
chisq.test(table_10.12)
?chisq.test
chisq.test(table_10.12,correct=FALSE)
?species
library(abmr)
?species
?pchisq
1-pchisq(6.2805,1)
library(abmr)
library(devtools)
install_github("bgoch5/abmr")
library(abmr)
library(abmR)
data(NOAM)
library(abmr)
library(raster)
ndvi_raster=stack("C:\\Users\\BGOCHANOUR\\Documents\\GitHub\\move-model\\Input_Data\\NDVI_2013.gri")
ndvi_raster=stack("C:\\Users\\BGOCHANOUR\\Documents\\GitHub\\move-model\\NDVI_2013.gri")
species <- setClass("species", slots=c(x="numeric", y="numeric",
p1="numeric", p1mean="numeric", p1sd="numeric",p1sign="character",
p2="numeric", p2mean="numeric", p2sd="numeric",p2sign="character"))
my_species=species(x=-100,y=26,p1=15,p1mean=10,p1sd=2,p1sign="Pos",
p2=7,p2mean=6,p2sd=1,p2sign="Pos")
testing2=moveSIM(replicates=1,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,modeled_species=my_species,
my_shapefile=NOAM,optimum=.5,direction="S",write_results=TRUE,single_rast=FALSE)
install_github("bgoch5/abmr")
libary(devtools)
library(devtools)
install_github("bgoch5/abmr")
install_github("bgoch5/abmr",force=TRUE)
library(abmr)
?stop()
library(abmr)
library(abmr)
data(ndvi_raster)
species <- setClass("species", slots=c(x="numeric", y="numeric",
p1="numeric", p1mean="numeric", p1sd="numeric",p1sign="character",
p2="numeric", p2mean="numeric", p2sd="numeric",p2sign="character"))
NOAM
data(NOAM)
my_species=species(x=-100,y=26,p1=15,p1mean=10,p1sd=2,p1sign="Pos",
p2=7,p2mean=6,p2sd=1,p2sign="Pos")
my_species=species(x=-100,y=26,p1=18,p1mean=10,p1sd=2,p1sign="Pos",
p2=7,p2mean=6,p2sd=1,p2sign="Pos")
testing
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
library(rgdal)
NOAM=readOGR(dsn="C:\\Users\\BGOCHANOUR\\Documents\\GitHub\\move-model
\\Input_Data",layer="NOAM")
NOAM=readOGR(dsn="C:\\Users\\BGOCHANOUR\\Documents\\GitHub\\move-model",layer="NOAM")
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
ndvi_raster=stack("C:\\Users\\BGOCHANOUR\\Documents\\GitHub\\move-model\\NDVI_2013.gri")
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
testing
my_species=species(x=-100,y=26,p1=15,p1mean=10,p1sd=2,p1sign="Pos",
p2=10,p2mean=6,p2sd=1,p2sign="Pos")
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
x="this
is
a string"
print(x)
print(cat(x))
cat(x)
?cat
library(abmr)
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
library(abmr)
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
testing2=moveSIM(replicates=1,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,modeled_species=my_species,
my_shapefile=NOAM,optimum=.5,direction="S",write_results=TRUE,single_rast=FALSE)
?energySIM
?moveSIM
?species
my_species=species(x=-100,y=26,p1=15,p1mean=10,p1sd=2,p1sign="Pos",
p2=10,p2mean=8,p2sd=1,p2sign="Pos")
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
data=testing
world <- ne_countries(scale = "medium", returnclass = "sf")
start.p <- cbind(data$results[1,1], data$results[1,2])
# Generalize this soon
start.p.df <- as.data.frame(start.p)
colnames(start.p.df)[1:2] = c("Lon", "Lat")
run = "ideal"
start.p.df <- cbind(start.p.df, run)
end.p <- cbind(data$run_params["dest_x"],data$run_params["dest_y"])
end.p.df <- as.data.frame(end.p)
colnames(end.p.df)[1:2] = c("Lon", "Lat")
end.p.df <- cbind(end.p.df, run)
ideal.df <- rbind(start.p.df, end.p.df)
t.energy.res <- data$results
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(-127, -78), ylim = c(10, 55), expand = FALSE) +
geom_path(data = t.energy.res,
aes(x=lon, y=lat),
color = "red", size = 0.6, alpha = 0.4, lineend = "round") +
geom_path(data = ideal.df,
aes(x=Lon, y=Lat),
color = "black", size = 1.2, alpha = 1, linetype = 2) +
ggtitle("mytitle")
t.energy.res
library(abmr)
my_species=species(x=-85,y=45,p1=15,p1mean=10,p1sd=2,p1sign="Pos",
p2=10,p2mean=8,p2sd=1,p2sign="Pos")
testing=energySIM(replicates=4,days=27,env_rast=ndvi_raster, search_radius=375,
sigma=.4, dest_x=-100, dest_y=25, mot_x=1, mot_y=1,
modeled_species=my_species, my_shapefile=NOAM,
optimum_lo=.4,optimum_hi=.6,init_energy=100,
direction="S",write_results=TRUE,single_rast=FALSE)
energyVIZ(testing)
library(abmr)
energyVIZ(testing)
xlim = c(min(t.energy.res$lon)-6, max(t.energy.res$lon)+6)
ylim = c(min(t.energy.res$lat)-6, max(t.energy.res$lat)+6)
xlim
t.energy.res
xlim = c((min(t.energy.res$lon)-6), (max(t.energy.res$lon)+6))
ylim = c((min(t.energy.res$lat)-6), max((t.energy.res$lat)+6))
xlim
min(t.energy.res)
min(t.energy.res$lon)
min(t.energy.res$lon,na.omit=TRUE)
?min
xlim = c((min(t.energy.res$lon,na.rm=T)-6), (max(t.energy.res$lon,na.rm=T)+6))
ylim = c((min(t.energy.res$lat,na.rm=T)-6), max((t.energy.res$lat,na.rm=T)+6))
xlim = c((min(t.energy.res$lon,na.rm=T)-6), (max(t.energy.res$lon,na.rm=T)+6))
ylim = c((min(t.energy.res$lat,na.rm=T)-6), (max(t.energy.res$lat,na.rm=T)+6))
xlim
library(abmr)
energyVIZ(testing)
library(abmr)
energyVIZ(testing)
library(abmr)
?moveSIM
?species
library(abmr)
?species
library(abmr)
library(abmr)
?species
library(abmr)
?species
library(abmr)
?species
library(abmr)
?species
library(abmr)
library(abmr)
library(abmr)
library(abmr)
library(abmr)
library(abmr)
library(abmr)
traceback()
?energySIM
library(abmr)
?energySIM
library(abmr)
?species
?test
library(abmr)
?species
library(abmr)
?species
?`species-class`
?species-class
library(abmr)
?species
species
library(abmr)
?species
library(abmr)
?species
?species
x=c(1,2,7,16,19)
#sample mean
x.bar=mean(x)
#sample standard deviation
S=sd(x)
#sample size
n=length(x)
#B is the number of bootstrap samples
B=5000
#create a numeric vector to hold the standardized quantity from each bootstrap sample
t.boot=numeric()
for (b in 1:B){
#sample WITH replacement
x.boot=sample(x,n,replace=T)
#compute the standardized quantity of the bootstrap sample
t.boot[b]=(mean(x.boot)-x.bar)/(sd(x.boot)/sqrt(n))
}
#bootstrap distribution
hist(t.boot)
#find 2.5-th and 97.5-th percentile of bootstrap distribution
quan=quantile(t.boot,c(.025,.975))
#95% bootstrap-t CI
lower=x.bar-quan[2]*S/sqrt(n)
upper=x.bar-quan[1]*S/sqrt(n)
lower
upper
#for comparison, one sample t-test and associated 95% CI
t.test(x)
?species
x=c(76-89,101-90,84-87,86-98,105-120,84-85,93-97)
#compute sample median
mean(x)
#obtain sample size
n=length(x)
#set seed for random number generation
set.seed(12345)
#B is the number of bootstrap samples
B=5000
#create a numeric vector to hold the median of each bootstrap sample
mean.boot=numeric()
x=c(76-89,101-90,84-87,86-98,105-120,84-85,93-97)
#compute sample median
mean(x)
#obtain sample size
n=length(x)
#set seed for random number generation
set.seed(12345)
#B is the number of bootstrap samples
B=5000
#create a numeric vector to hold the median of each bootstrap sample
mean.boot=numeric()
for (b in 1:B){
#sample WITH replacement
x.boot=sample(x,n,replace=T)
#compute median of the bootstrap sample
mean.boot[b]=mean(x.boot)
}
#calculate the SAMPLE variance of the B bootstrap medians
var.boot=var(mean.boot)
etheta=mean(x)
eMSE<-var.boot+(mean(median.boot)-etheta)^{2}
LB2<-etheta-sqrt(20)*sqrt(eMSE)
UB2<-etheta+sqrt(20)*sqrt(eMSE)
x=c(76-89,101-90,84-87,86-98,105-120,84-85,93-97)
#compute sample median
mean(x)
#obtain sample size
n=length(x)
#set seed for random number generation
set.seed(12345)
#B is the number of bootstrap samples
B=5000
#create a numeric vector to hold the median of each bootstrap sample
mean.boot=numeric()
for (b in 1:B){
#sample WITH replacement
x.boot=sample(x,n,replace=T)
#compute median of the bootstrap sample
mean.boot[b]=mean(x.boot)
}
#calculate the SAMPLE variance of the B bootstrap medians
var.boot=var(mean.boot)
etheta=mean(x)
eMSE<-var.boot+(mean(mean.boot)-etheta)^{2}
LB2<-etheta-sqrt(20)*sqrt(eMSE)
UB2<-etheta+sqrt(20)*sqrt(eMSE)
# Normal Approx
LB1=etheta-1.96*sqrt(var.boot)
UB1=etheta+1.96*sqrt(var.boot)
LB1;UB1
LB2;UB2
# Percentile Method
quantile(mean.boot,c(.025,.975))
sqrt(var.boot)
quan=quantile(mean.boot,c(.025,.975))
lower=2*mean(x)-quan[2]
upper=2*mean(x)-quan[1]
lower
upper
t.boot=numeric()
t.boot=numeric()
n=length(x)
x.bar=etheta
n
x.bar
mean.boot
for (b in 1:B){
#sample WITH replacement
x.boot=sample(x,n,replace=T)
#compute the standardized quantity of the bootstrap sample
t.boot[b]=(mean(x.boot)-x.bar)/(sd(x.boot)/sqrt(n))
}
#bootstrap distribution
hist(t.boot)
#find 2.5-th and 97.5-th percentile of bootstrap distribution
quan=quantile(t.boot,c(.025,.975))
#95% bootstrap-t CI
lower=x.bar-quan[2]*S/sqrt(n)
upper=x.bar-quan[1]*S/sqrt(n)
lower
upper
x=matrix(c(1.6,2.9,1.7,4.8,.9,3.4,.5,3.5,1.6,2.2,-.8,3.8,1.6,2.1,
.7,2.7,.7,4.1,.1,3.3),byrow=T,ncol=2)
x
mu.hat=apply(x,2,mean)
#sample covariance matrix
Sigma.hat=cov(x)
install.packages("mvtnorm")
library(mvtnorm)
ratio.boot=numeric()
for (b in 1:B){
#Bootstrap samples form N(mu.hat,Sigma.hat)
x.boot=rmvnorm(n,mean=mu.hat,sigma=Sigma.hat)
#compute corr. coeff. of the bootstrap sample
ratio.boot[b]=cor(x.boot)[1,2]
}
x.boot[1]
x.boot
x.boot[,1]
x.boot[,2]
ratio.boot=numeric()
for (b in 1:B){
#Bootstrap samples form N(mu.hat,Sigma.hat)
x.boot=rmvnorm(n,mean=mu.hat,sigma=Sigma.hat)
#compute corr. coeff. of the bootstrap sample
ratio.boot[b]=mean(x.boot)[,1]/mean(x.boot)[,2]
}
ratio.boot=numeric()
for (b in 1:B){
#Bootstrap samples form N(mu.hat,Sigma.hat)
x.boot=rmvnorm(n,mean=mu.hat,sigma=Sigma.hat)
#compute corr. coeff. of the bootstrap sample
ratio.boot[b]=mean(x.boot[,1])/mean(x.boot[,2])
}
var.boot=var(ratio.boot)
est=x[,1]/x[,2]
LB=est-1.96*sqrt(var.boot)
UB=est+1.96*sqrt(var.boot)
LB;UB
est=mean(x[,1])/mean(x[,2])
LB=est-1.96*sqrt(var.boot)
UB=est+1.96*sqrt(var.boot)
LB;UB
est
ratio.boot=numeric()
for (b in 1:B){
#sample WITH replacement
inds.boot=sample(1:n,n,replace=T)
x.boot=x[inds.boot,]
ratio.boot[b]=mean(x.boot[,1])/mean(x.boot[,2])
}
quan=quantile(ratio.boot,c(.025,.975))
quan
