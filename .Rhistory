coef(regfit.full.back,which.max(reg.summary.back$adjr2))
coef(regfit.full.back,which.min(reg.summary.back$cp))
coef(regfit.full.back,which.min(reg.summary.back$bic))
lm_fit_backward = lm(crim ~ rad+black+medv, data = train_dat)
lm_pred_backward = predict(lm_fit_backward, test_dat)
summary(lm_fit_backward)
mse_backward = mean((lm_pred_backward - test_dat$crim)^2)
#Forward
par(mfrow=c(2,2))
regfit.full.forward = regsubsets(crim~., nvmax = 10,
method="forward",data=train_dat)
reg.summary.forward = summary(regfit.full.forward)
reg.summary.forward
plot(reg.summary.forward$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
points(which.max(reg.summary.forward$adjr2),reg.summary.forward$adjr2[which.max(reg.summary.forward$adjr2)], col="red",cex=2,pch=20)
plot(reg.summary.forward$cp,xlab="Number of Variables",ylab="Cp",type='l')
points(which.min(reg.summary.forward$cp),reg.summary.forward$cp[which.min(reg.summary.forward$cp)],col="red",cex=2,pch=20)
plot(reg.summary.forward$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(which.min(reg.summary.forward$bic),reg.summary.forward$bic[which.min(reg.summary.forward$bic)],col="red",cex=2,pch=20)
coef(regfit.full.forward,which.max(reg.summary.forward$adjr2))
coef(regfit.full.forward,which.min(reg.summary.forward$cp))
coef(regfit.full.forward,which.min(reg.summary.forward$bic))
# Fit an lm on forward based on BIC
lm_fit_forward = lm(crim ~ rad+black+lstat, data = train_dat)
lm_pred_forward = predict(lm_fit_forward, test_dat)
summary(lm_fit_forward)
mse_forward = mean((lm_pred_forward - test_dat$crim)^2)
# Best Subset
par(mfrow=c(2,2))
regfit.full.bestsubset = regsubsets(crim~., nvmax = 10,
data=train_dat)
reg.summary.best = summary(regfit.full.bestsubset)
reg.summary.best
plot(reg.summary.best$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
points(which.max(reg.summary.best$adjr2),reg.summary.best$adjr2[which.max(reg.summary.best$adjr2)], col="red",cex=2,pch=20)
plot(reg.summary.best$cp,xlab="Number of Variables",ylab="Cp",type='l')
points(which.min(reg.summary.best$cp),reg.summary.best$cp[which.min(reg.summary.best$cp)],col="red",cex=2,pch=20)
plot(reg.summary.best$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(which.min(reg.summary.best$bic),reg.summary.best$bic[which.min(reg.summary.best$bic)],col="red",cex=2,pch=20)
coef(regfit.full.bestsubset,which.max(reg.summary.best$adjr2))
coef(regfit.full.bestsubset,which.min(reg.summary.best$cp))
coef(regfit.full.bestsubset,which.min(reg.summary.best$bic))
# Fit an lm based on BIC
lm_fit_bestsubset = lm(crim ~ rad+black+lstat, data = train_dat)
lm_pred_bestsubset = predict(lm_fit_bestsubset, test_dat)
summary(lm_fit_bestsubset)
mse_bestsubset=mean((lm_pred_bestsubset - test_dat$crim)^2)
# OLS
lm_fit = lm(crim ~ ., data = train_dat)
lm_pred = predict(lm_fit, test_dat)
summary(lm_fit)
mse_ols = mean((lm_pred - test_dat$crim)^2)
# Ridge
train.mat = model.matrix(crim ~ ., data = train_dat)
test.mat = model.matrix(crim ~ ., data = test_dat)
grid = 10 ^ seq(4, -2, length = 100)
ridge_fit = glmnet(train.mat, train_dat$crim, alpha = 0, lambda = grid)
ridge_cv = cv.glmnet(train.mat, train_dat$crim, alpha = 0, lambda = grid)
opt_lambda = ridge_cv$lambda.min
opt_lambda
ridge_pred = predict(ridge_fit, s = opt_lambda, newx = test.mat)
mse_ridge = mean((ridge_pred - test_dat$crim)^2)
# Lasso
lasso_fit = glmnet(train.mat, train_dat$crim, alpha = 1, lambda = grid, thresh = 1e-12)
lasso_cv = cv.glmnet(train.mat, train_dat$crim, alpha = 1, lambda = grid, thresh = 1e-12)
opt_lambda_lasso = lasso_cv$lambda.min
opt_lambda_lasso
lasso_pred = predict(lasso_fit, s = opt_lambda_lasso, newx = test.mat)
mse_lasso = mean((lasso_pred - test_dat$crim)^2)
tmp_coeffs <- coef(lasso_cv, s = "lambda.min")
data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
# PCR
pcr_fit = pcr(crim ~ ., data = train_dat, scale = T, validation = "CV")
validationplot(pcr_fit, val.type = "MSEP")
pcr_pred = predict(pcr_fit, test_dat, ncomp = 8) # Reduce as much as I can
mse_pcr = mean((pcr_pred - test_dat$crim)^2)
# PLS
pls_fit = plsr(crim ~ ., data = train_dat, scale = T, validation = "CV")
validationplot(pls_fit, val.type = "MSEP")
pls_pred = predict(pls_fit, test_dat, ncomp = 6)
mse_pls =mean((pls_pred - test_dat$crim)^2)
# Summarizing Everything
test_average = mean(test_dat$crim)
r2_lm = 1-mean((lm_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_bestsubset= 1-mean((lm_pred_bestsubset - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_forward= 1-mean((lm_pred_forward - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_backward=1-mean((lm_pred_backward - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_ridge = 1-mean((ridge_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_lasso = 1-mean((lasso_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_pcr = 1-mean((pcr_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_pls = 1-mean((pls_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
my_r2_vals=rbind(r2_lm,r2_bestsubset,r2_forward,r2_backward,r2_ridge,r2_lasso,r2_pcr,r2_pls)
my_MSEs=rbind(mse_ols,mse_bestsubset,mse_forward,mse_backward,mse_ridge,mse_lasso,mse_pcr,mse_pls)
my_names=rbind( "OLS","Best Subset", "Forward", "Backward","Ridge Reg", "Lasso Reg", "PCR", "PLS")
dat=cbind(my_names,my_r2_vals,my_MSEs)
colnames(dat)=c("Model","R^2","Test MSE")
dat
# Think I'll go with Lasso
tmp_coeffs <- coef(lasso_cv, s = "lambda.min")
data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
# compare with OLS
summary(lm_fit)
rownames(dat)=1:length(my_names)
dat
colnames(dat)=c("Model","R^2","Test_MSE")
rownames(dat)=1:length(my_names)
dat
write.csv(dat,"My Table")
write.csv(dat,"My Table.csv")
setwd("~/")
write.csv(dat,"My Table.csv")
lasso_cv
lasso_fit
coef(regfit.full.back,which.max(reg.summary.back$adjr2))
install.packages("pixiedust")
library(pixiedust)
dust(lm_fit_backward) %>%
sprinkle(col = 2:4, round = 3) %>%
sprinkle(col = 5, fn = quote(pvalString(value))) %>%
sprinkle_colnames(term = "Term",
estimate = "Estimate",
std.error = "SE",
statistic = "T-statistic",
p.value = "P-value") %>%
sprinkle_print_method("console")
?sprinkle_print_method
dust(lm_fit_backward) %>%
sprinkle(col = 2:4, round = 3) %>%
sprinkle(col = 5, fn = quote(pvalString(value))) %>%
sprinkle_colnames(term = "Term",
estimate = "Estimate",
std.error = "SE",
statistic = "T-statistic",
p.value = "P-value") %>%
sprinkle_print_method("html")
dust(lm_fit_backward) %>%
sprinkle(col = 2:4, round = 3) %>%
sprinkle(col = 5, fn = quote(pvalString(value))) %>%
sprinkle_colnames(term = "Term",
estimate = "Estimate",
std.error = "SE",
statistic = "T-statistic",
p.value = "P-value") %>%
sprinkle_print_method("latex")
dust(lm_fit_backward) %>%
sprinkle(col = 2:4, round = 3) %>%
sprinkle(col = 5, fn = quote(pvalString(value))) %>%
sprinkle_colnames(term = "Term",
estimate = "Estimate",
std.error = "SE",
statistic = "T-statistic",
p.value = "P-value") %>%
sprinkle_print_method("console")
# Think I'll go with Lasso
tmp_coeffs <- coef(lasso_cv, s = "lambda.min")
data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
summary(lm_fit)
write.csv(test,"test.csv")
test=data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
test
write.csv(test,"test.csv")
write.csv(test,"test.csv")
summary(lm_fit)
my_df=summary(lm_fit$coefficients)
write.csv(my_df,"my_df.csv")
my_df
my_df=summary(lm_fit)$coefficients
write.csv(my_df,"my_df.csv")
lasso_fit
coef(lasso_cv)
data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
tmp_coeffs
summary(Boston)
library(qwraps2)
install.packages(qwraps2)
install.packages("qwraps2")
library(qwraps2)
summary_table(Boston)
test
test=summary_table(Boston)
test
summary_table(Boston[,2:5])
install.packages("gtsummary")
install.packages("gtsummary")
library(gtsummary)
library(gtsummary)
tbl_summary(Boston)
library(gtsummary)
library(gtsummary)
library(qwraps2)
install.packages("gtsummary")
library(gtsummary)
install.packages("gtsummary")
install.packages("gtsummary")
library(gtsummary)
tbl_summary(Boston)
Boston
Boston$rad
type(Boston$rad)
class(Boston$rad)
summary(Boston)
Boston
?Boston
??Boston
data(Boston)
Boston$rad=as.factor(Boston$rad)
summary(Boston)
# Create train and test data
set.seed(1)
train=sample(c(TRUE,FALSE), nrow(Boston),rep=TRUE)
test=(!train)
train_dat=Boston[train,]
test_dat=Boston[test,]
# Try out some of the regression methods including best subset selection, backward, forward, the lasso,
# ridge regression, and PCR. Present and discuss results for the approaches that you consider.
# Backward
regfit.full.back = regsubsets(crim~., nvmax = 10,
method="backward",data=train_dat)
reg.summary.back = summary(regfit.full.back)
reg.summary.back
par(mfrow=c(2,2))
plot(reg.summary.back$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
points(which.max(reg.summary.back$adjr2),reg.summary.back$adjr2[which.max(reg.summary.back$adjr2)], col="red",cex=2,pch=20)
plot(reg.summary.back$cp,xlab="Number of Variables",ylab="Cp",type='l')
points(which.min(reg.summary.back$cp),reg.summary.back$cp[which.min(reg.summary.back$cp)],col="red",cex=2,pch=20)
plot(reg.summary.back$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(which.min(reg.summary.back$bic),reg.summary.back$bic[which.min(reg.summary.back$bic)],col="red",cex=2,pch=20)
coef(regfit.full.back,which.max(reg.summary.back$adjr2))
coef(regfit.full.back,which.min(reg.summary.back$cp))
coef(regfit.full.back,which.min(reg.summary.back$bic))
lm_fit_backward = lm(crim ~ rad+black+medv, data = train_dat)
lm_pred_backward = predict(lm_fit_backward, test_dat)
summary(lm_fit_backward)
mse_backward = mean((lm_pred_backward - test_dat$crim)^2)
#Forward
par(mfrow=c(2,2))
regfit.full.forward = regsubsets(crim~., nvmax = 10,
method="forward",data=train_dat)
reg.summary.forward = summary(regfit.full.forward)
reg.summary.forward
plot(reg.summary.forward$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
points(which.max(reg.summary.forward$adjr2),reg.summary.forward$adjr2[which.max(reg.summary.forward$adjr2)], col="red",cex=2,pch=20)
plot(reg.summary.forward$cp,xlab="Number of Variables",ylab="Cp",type='l')
points(which.min(reg.summary.forward$cp),reg.summary.forward$cp[which.min(reg.summary.forward$cp)],col="red",cex=2,pch=20)
plot(reg.summary.forward$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(which.min(reg.summary.forward$bic),reg.summary.forward$bic[which.min(reg.summary.forward$bic)],col="red",cex=2,pch=20)
coef(regfit.full.forward,which.max(reg.summary.forward$adjr2))
coef(regfit.full.forward,which.min(reg.summary.forward$cp))
coef(regfit.full.forward,which.min(reg.summary.forward$bic))
# Fit an lm on forward based on BIC
lm_fit_forward = lm(crim ~ rad+black+lstat, data = train_dat)
lm_pred_forward = predict(lm_fit_forward, test_dat)
summary(lm_fit_forward)
mse_forward = mean((lm_pred_forward - test_dat$crim)^2)
# Best Subset
par(mfrow=c(2,2))
regfit.full.bestsubset = regsubsets(crim~., nvmax = 10,
data=train_dat)
reg.summary.best = summary(regfit.full.bestsubset)
reg.summary.best
plot(reg.summary.best$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
points(which.max(reg.summary.best$adjr2),reg.summary.best$adjr2[which.max(reg.summary.best$adjr2)], col="red",cex=2,pch=20)
plot(reg.summary.best$cp,xlab="Number of Variables",ylab="Cp",type='l')
points(which.min(reg.summary.best$cp),reg.summary.best$cp[which.min(reg.summary.best$cp)],col="red",cex=2,pch=20)
plot(reg.summary.best$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(which.min(reg.summary.best$bic),reg.summary.best$bic[which.min(reg.summary.best$bic)],col="red",cex=2,pch=20)
coef(regfit.full.bestsubset,which.max(reg.summary.best$adjr2))
coef(regfit.full.bestsubset,which.min(reg.summary.best$cp))
coef(regfit.full.bestsubset,which.min(reg.summary.best$bic))
# Fit an lm based on BIC
lm_fit_bestsubset = lm(crim ~ rad+black+lstat, data = train_dat)
lm_pred_bestsubset = predict(lm_fit_bestsubset, test_dat)
summary(lm_fit_bestsubset)
mse_bestsubset=mean((lm_pred_bestsubset - test_dat$crim)^2)
# OLS
lm_fit = lm(crim ~ ., data = train_dat)
lm_pred = predict(lm_fit, test_dat)
summary(lm_fit)
mse_ols = mean((lm_pred - test_dat$crim)^2)
# Ridge
train.mat = model.matrix(crim ~ ., data = train_dat)
test.mat = model.matrix(crim ~ ., data = test_dat)
grid = 10 ^ seq(4, -2, length = 100)
ridge_fit = glmnet(train.mat, train_dat$crim, alpha = 0, lambda = grid)
ridge_cv = cv.glmnet(train.mat, train_dat$crim, alpha = 0, lambda = grid)
opt_lambda = ridge_cv$lambda.min
opt_lambda
ridge_pred = predict(ridge_fit, s = opt_lambda, newx = test.mat)
mse_ridge = mean((ridge_pred - test_dat$crim)^2)
# Lasso
lasso_fit = glmnet(train.mat, train_dat$crim, alpha = 1, lambda = grid, thresh = 1e-12)
lasso_cv = cv.glmnet(train.mat, train_dat$crim, alpha = 1, lambda = grid, thresh = 1e-12)
opt_lambda_lasso = lasso_cv$lambda.min
opt_lambda_lasso
lasso_pred = predict(lasso_fit, s = opt_lambda_lasso, newx = test.mat)
mse_lasso = mean((lasso_pred - test_dat$crim)^2)
lasso_fit
tmp_coeffs <- coef(lasso_cv, s = "lambda.min")
tmp_coeffs
data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
# PCR
pcr_fit = pcr(crim ~ ., data = train_dat, scale = T, validation = "CV")
validationplot(pcr_fit, val.type = "MSEP")
pcr_pred = predict(pcr_fit, test_dat, ncomp = 8) # Reduce as much as I can
mse_pcr = mean((pcr_pred - test_dat$crim)^2)
# PLS
pls_fit = plsr(crim ~ ., data = train_dat, scale = T, validation = "CV")
validationplot(pls_fit, val.type = "MSEP")
pls_pred = predict(pls_fit, test_dat, ncomp = 6)
mse_pls =mean((pls_pred - test_dat$crim)^2)
# Summarizing Everything
test_average = mean(test_dat$crim)
r2_lm = 1-mean((lm_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_bestsubset= 1-mean((lm_pred_bestsubset - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_forward= 1-mean((lm_pred_forward - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_backward=1-mean((lm_pred_backward - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_ridge = 1-mean((ridge_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_lasso = 1-mean((lasso_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_pcr = 1-mean((pcr_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_pls = 1-mean((pls_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
my_r2_vals=rbind(r2_lm,r2_bestsubset,r2_forward,r2_backward,r2_ridge,r2_lasso,r2_pcr,r2_pls)
my_MSEs=rbind(mse_ols,mse_bestsubset,mse_forward,mse_backward,mse_ridge,mse_lasso,mse_pcr,mse_pls)
my_names=rbind( "OLS","Best Subset", "Forward", "Backward","Ridge Reg", "Lasso Reg", "PCR", "PLS")
dat=cbind(my_names,my_r2_vals,my_MSEs)
colnames(dat)=c("Model","R^2","Test_MSE")
rownames(dat)=1:length(my_names)
ibrary(MASS)
library(ISLR)
library(pls)
library(glmnet)
library(leaps)
library(pixiedust)
library(qwraps2)
library(gtsummary)
data(Boston)
summary(Boston)
tbl_summary(Boston)
Boston$rad=as.factor(Boston$rad)
summary(Boston)
set.seed(1)
train=sample(c(TRUE,FALSE), nrow(Boston),rep=TRUE)
test=(!train)
train_dat=Boston[train,]
test_dat=Boston[test,]
# Try out some of the regression methods including best subset selection, backward, forward, the lasso,
# ridge regression, and PCR. Present and discuss results for the approaches that you consider.
# Backward
regfit.full.back = regsubsets(crim~., nvmax = 10,
method="backward",data=train_dat)
reg.summary.back = summary(regfit.full.back)
reg.summary.back
par(mfrow=c(2,2))
plot(reg.summary.back$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
points(which.max(reg.summary.back$adjr2),reg.summary.back$adjr2[which.max(reg.summary.back$adjr2)], col="red",cex=2,pch=20)
plot(reg.summary.back$cp,xlab="Number of Variables",ylab="Cp",type='l')
points(which.min(reg.summary.back$cp),reg.summary.back$cp[which.min(reg.summary.back$cp)],col="red",cex=2,pch=20)
plot(reg.summary.back$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(which.min(reg.summary.back$bic),reg.summary.back$bic[which.min(reg.summary.back$bic)],col="red",cex=2,pch=20)
coef(regfit.full.back,which.max(reg.summary.back$adjr2))
coef(regfit.full.back,which.min(reg.summary.back$cp))
coef(regfit.full.back,which.min(reg.summary.back$bic))
lm_fit_backward = lm(crim ~ rad+black+medv, data = train_dat)
lm_pred_backward = predict(lm_fit_backward, test_dat)
summary(lm_fit_backward)
mse_backward = mean((lm_pred_backward - test_dat$crim)^2)
#Forward
par(mfrow=c(2,2))
regfit.full.forward = regsubsets(crim~., nvmax = 10,
method="forward",data=train_dat)
reg.summary.forward = summary(regfit.full.forward)
reg.summary.forward
plot(reg.summary.forward$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
points(which.max(reg.summary.forward$adjr2),reg.summary.forward$adjr2[which.max(reg.summary.forward$adjr2)], col="red",cex=2,pch=20)
plot(reg.summary.forward$cp,xlab="Number of Variables",ylab="Cp",type='l')
points(which.min(reg.summary.forward$cp),reg.summary.forward$cp[which.min(reg.summary.forward$cp)],col="red",cex=2,pch=20)
plot(reg.summary.forward$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(which.min(reg.summary.forward$bic),reg.summary.forward$bic[which.min(reg.summary.forward$bic)],col="red",cex=2,pch=20)
coef(regfit.full.forward,which.max(reg.summary.forward$adjr2))
coef(regfit.full.forward,which.min(reg.summary.forward$cp))
coef(regfit.full.forward,which.min(reg.summary.forward$bic))
# Fit an lm on forward based on BIC
lm_fit_forward = lm(crim ~ rad+black+lstat, data = train_dat)
lm_pred_forward = predict(lm_fit_forward, test_dat)
summary(lm_fit_forward)
mse_forward = mean((lm_pred_forward - test_dat$crim)^2)
# Best Subset
par(mfrow=c(2,2))
regfit.full.bestsubset = regsubsets(crim~., nvmax = 10,
data=train_dat)
reg.summary.best = summary(regfit.full.bestsubset)
reg.summary.best
plot(reg.summary.best$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
points(which.max(reg.summary.best$adjr2),reg.summary.best$adjr2[which.max(reg.summary.best$adjr2)], col="red",cex=2,pch=20)
plot(reg.summary.best$cp,xlab="Number of Variables",ylab="Cp",type='l')
points(which.min(reg.summary.best$cp),reg.summary.best$cp[which.min(reg.summary.best$cp)],col="red",cex=2,pch=20)
plot(reg.summary.best$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(which.min(reg.summary.best$bic),reg.summary.best$bic[which.min(reg.summary.best$bic)],col="red",cex=2,pch=20)
coef(regfit.full.bestsubset,which.max(reg.summary.best$adjr2))
coef(regfit.full.bestsubset,which.min(reg.summary.best$cp))
coef(regfit.full.bestsubset,which.min(reg.summary.best$bic))
# Fit an lm based on BIC
lm_fit_bestsubset = lm(crim ~ rad+black+lstat, data = train_dat)
lm_pred_bestsubset = predict(lm_fit_bestsubset, test_dat)
summary(lm_fit_bestsubset)
mse_bestsubset=mean((lm_pred_bestsubset - test_dat$crim)^2)
# OLS
lm_fit = lm(crim ~ ., data = train_dat)
lm_pred = predict(lm_fit, test_dat)
summary(lm_fit)
mse_ols = mean((lm_pred - test_dat$crim)^2)
# Ridge
train.mat = model.matrix(crim ~ ., data = train_dat)
test.mat = model.matrix(crim ~ ., data = test_dat)
grid = 10 ^ seq(4, -2, length = 100)
ridge_fit = glmnet(train.mat, train_dat$crim, alpha = 0, lambda = grid)
ridge_cv = cv.glmnet(train.mat, train_dat$crim, alpha = 0, lambda = grid)
opt_lambda = ridge_cv$lambda.min
opt_lambda
ridge_pred = predict(ridge_fit, s = opt_lambda, newx = test.mat)
mse_ridge = mean((ridge_pred - test_dat$crim)^2)
# Lasso
lasso_fit = glmnet(train.mat, train_dat$crim, alpha = 1, lambda = grid, thresh = 1e-12)
lasso_cv = cv.glmnet(train.mat, train_dat$crim, alpha = 1, lambda = grid, thresh = 1e-12)
opt_lambda_lasso = lasso_cv$lambda.min
opt_lambda_lasso
lasso_pred = predict(lasso_fit, s = opt_lambda_lasso, newx = test.mat)
mse_lasso = mean((lasso_pred - test_dat$crim)^2)
lasso_fit
tmp_coeffs <- coef(lasso_cv, s = "lambda.min")
tmp_coeffs
data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
# PCR
pcr_fit = pcr(crim ~ ., data = train_dat, scale = T, validation = "CV")
validationplot(pcr_fit, val.type = "MSEP")
pcr_pred = predict(pcr_fit, test_dat, ncomp = 8) # Reduce as much as I can
mse_pcr = mean((pcr_pred - test_dat$crim)^2)
# PLS
pls_fit = plsr(crim ~ ., data = train_dat, scale = T, validation = "CV")
validationplot(pls_fit, val.type = "MSEP")
pls_pred = predict(pls_fit, test_dat, ncomp = 6)
mse_pls =mean((pls_pred - test_dat$crim)^2)
# Summarizing Everything
test_average = mean(test_dat$crim)
r2_lm = 1-mean((lm_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_bestsubset= 1-mean((lm_pred_bestsubset - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_forward= 1-mean((lm_pred_forward - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_backward=1-mean((lm_pred_backward - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_ridge = 1-mean((ridge_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_lasso = 1-mean((lasso_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_pcr = 1-mean((pcr_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
r2_pls = 1-mean((pls_pred - test_dat$crim)^2) / mean((test_average - test_dat$crim)^2)
my_r2_vals=rbind(r2_lm,r2_bestsubset,r2_forward,r2_backward,r2_ridge,r2_lasso,r2_pcr,r2_pls)
my_MSEs=rbind(mse_ols,mse_bestsubset,mse_forward,mse_backward,mse_ridge,mse_lasso,mse_pcr,mse_pls)
my_names=rbind( "OLS","Best Subset", "Forward", "Backward","Ridge Reg", "Lasso Reg", "PCR", "PLS")
dat=cbind(my_names,my_r2_vals,my_MSEs)
colnames(dat)=c("Model","R^2","Test_MSE")
rownames(dat)=1:length(my_names)
dat
write.csv(dat,"My Table.csv")
write.csv(dat,"My Table.csv")
dust(lm_fit_backward) %>%
sprinkle(col = 2:4, round = 3) %>%
sprinkle(col = 5, fn = quote(pvalString(value))) %>%
sprinkle_colnames(term = "Term",
estimate = "Estimate",
std.error = "SE",
statistic = "T-statistic",
p.value = "P-value") %>%
sprinkle_print_method("console")
data(Boston)
data(Boston)
# Load the libraries and data
library(MASS)
data(Boston)
tbl_summary(Boston)
?tbl_summary
tbl_summary(Boston[,-"rad"])
Boston
tbl_summary(Boston[,-9])
Boston
?Boston
plot(crim~black,data=Boston)
plot(black,crime,data=Boston)
dev.off()
plot(crime~black,data=Boston)
plot(crim~black,data=Boston)
plot(crim~medv)
plot(crim~medv,data=Boston)
hist(crim)
hist(crim,data=Boston)
hist(crim,data=Boston)
data(Boston)
summary(Boston)
hist(crim,data=Boston)
hist(Boston$crim)
hist(Boston$crim,bins=7)
hist(Boston$crim,nbins=7)
version
R.version()
R.Version()
length(test_dat)
nrow(test_dat)
nrow(train_dat)
244+262
244/506
262/506
?validationplot
validationplot(pls_fit, val.type = "MSEP")
install.packages("testthat")
library(abmr)
library(abmr)
traceback()
